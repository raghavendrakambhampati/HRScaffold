/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.hrdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.hrdb.service.HrdbQueryExecutorService;
import com.hrdb.models.query.*;

@RestController(value = "Hrdb.QueryExecutionController")
@RequestMapping("/hrdb/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private HrdbQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/checking", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<CheckingResponse> executeChecking(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: checking");
        Page<CheckingResponse> _result = queryService.executeChecking(pageable);
        LOGGER.debug("got the result for named query: checking, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query checking")
    @RequestMapping(value = "/queries/checking/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportChecking(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: checking");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "checking";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportChecking( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/EmploteeList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<EmploteeListResponse> executeEmploteeList(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: EmploteeList");
        Page<EmploteeListResponse> _result = queryService.executeEmploteeList(pageable);
        LOGGER.debug("got the result for named query: EmploteeList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query EmploteeList")
    @RequestMapping(value = "/queries/EmploteeList/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportEmploteeList(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: EmploteeList");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "EmploteeList";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportEmploteeList( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/EmployeeSelectVar", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<EmployeeSelectVarResponse> executeEmployeeSelectVar(@RequestParam(value = "SelectedEmployee") Integer selectedEmployee, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: EmployeeSelectVar");
        Page<EmployeeSelectVarResponse> _result = queryService.executeEmployeeSelectVar(selectedEmployee, pageable);
        LOGGER.debug("got the result for named query: EmployeeSelectVar, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query EmployeeSelectVar")
    @RequestMapping(value = "/queries/EmployeeSelectVar/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportEmployeeSelectVar(@RequestParam(value = "SelectedEmployee") Integer selectedEmployee, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: EmployeeSelectVar");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "EmployeeSelectVar";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportEmployeeSelectVar(selectedEmployee,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SearchEmployees", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<SearchEmployeesResponse> executeSearchEmployees(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SearchEmployees");
        Page<SearchEmployeesResponse> _result = queryService.executeSearchEmployees(pageable);
        LOGGER.debug("got the result for named query: SearchEmployees, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SearchEmployees")
    @RequestMapping(value = "/queries/SearchEmployees/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSearchEmployees(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SearchEmployees");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SearchEmployees";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSearchEmployees( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SelectEmployee", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<SelectEmployeeResponse> executeSelectEmployee(@RequestParam(value = "SearchID") Integer searchId, @RequestParam(value = "LiveListID") Integer liveListId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SelectEmployee");
        Page<SelectEmployeeResponse> _result = queryService.executeSelectEmployee(searchId, liveListId, pageable);
        LOGGER.debug("got the result for named query: SelectEmployee, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SelectEmployee")
    @RequestMapping(value = "/queries/SelectEmployee/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSelectEmployee(@RequestParam(value = "SearchID") Integer searchId, @RequestParam(value = "LiveListID") Integer liveListId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SelectEmployee");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SelectEmployee";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSelectEmployee(searchId, liveListId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/EmployeeListOf_DeptId2", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<EmployeeListOfDeptId2Response> executeEmployeeListOf_DeptId2(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: EmployeeListOf_DeptId2");
        Page<EmployeeListOfDeptId2Response> _result = queryService.executeEmployeeListOf_DeptId2(pageable);
        LOGGER.debug("got the result for named query: EmployeeListOf_DeptId2, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query EmployeeListOf_DeptId2")
    @RequestMapping(value = "/queries/EmployeeListOf_DeptId2/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportEmployeeListOf_DeptId2(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: EmployeeListOf_DeptId2");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "EmployeeListOf_DeptId2";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportEmployeeListOf_DeptId2( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/EmployeeListOf_Deptid3", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<EmployeeListOfDeptid3Response> executeEmployeeListOf_Deptid3(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: EmployeeListOf_Deptid3");
        Page<EmployeeListOfDeptid3Response> _result = queryService.executeEmployeeListOf_Deptid3(pageable);
        LOGGER.debug("got the result for named query: EmployeeListOf_Deptid3, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query EmployeeListOf_Deptid3")
    @RequestMapping(value = "/queries/EmployeeListOf_Deptid3/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportEmployeeListOf_Deptid3(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: EmployeeListOf_Deptid3");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "EmployeeListOf_Deptid3";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportEmployeeListOf_Deptid3( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/EmployeeListOf_DeptId1", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<EmployeeListOfDeptId1Response> executeEmployeeListOf_DeptId1(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: EmployeeListOf_DeptId1");
        Page<EmployeeListOfDeptId1Response> _result = queryService.executeEmployeeListOf_DeptId1(pageable);
        LOGGER.debug("got the result for named query: EmployeeListOf_DeptId1, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query EmployeeListOf_DeptId1")
    @RequestMapping(value = "/queries/EmployeeListOf_DeptId1/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportEmployeeListOf_DeptId1(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: EmployeeListOf_DeptId1");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "EmployeeListOf_DeptId1";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportEmployeeListOf_DeptId1( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/DepartmentCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<DepartmentCountResponse> executeDepartmentCount(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: DepartmentCount");
        Page<DepartmentCountResponse> _result = queryService.executeDepartmentCount(pageable);
        LOGGER.debug("got the result for named query: DepartmentCount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query DepartmentCount")
    @RequestMapping(value = "/queries/DepartmentCount/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportDepartmentCount(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: DepartmentCount");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "DepartmentCount";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportDepartmentCount( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Srv_Var_EmployeeCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<SrvVarEmployeeCountResponse> executeSrv_Var_EmployeeCount(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Srv_Var_EmployeeCount");
        Page<SrvVarEmployeeCountResponse> _result = queryService.executeSrv_Var_EmployeeCount(pageable);
        LOGGER.debug("got the result for named query: Srv_Var_EmployeeCount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Srv_Var_EmployeeCount")
    @RequestMapping(value = "/queries/Srv_Var_EmployeeCount/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSrv_Var_EmployeeCount(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Srv_Var_EmployeeCount");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Srv_Var_EmployeeCount";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSrv_Var_EmployeeCount( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/_ColleagueDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<ColleagueDetailsResponse> execute_ColleagueDetails(@RequestParam(value = "selectedemployeedeptid") Integer selectedemployeedeptid, @RequestParam(value = "selectedemployeeid") Integer selectedemployeeid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: _ColleagueDetails");
        Page<ColleagueDetailsResponse> _result = queryService.execute_ColleagueDetails(selectedemployeedeptid, selectedemployeeid, pageable);
        LOGGER.debug("got the result for named query: _ColleagueDetails, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query _ColleagueDetails")
    @RequestMapping(value = "/queries/_ColleagueDetails/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper export_ColleagueDetails(@RequestParam(value = "selectedemployeedeptid") Integer selectedemployeedeptid, @RequestParam(value = "selectedemployeeid") Integer selectedemployeeid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: _ColleagueDetails");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "_ColleagueDetails";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.export_ColleagueDetails(selectedemployeedeptid, selectedemployeeid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SelectEmployeeVar", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<SelectEmployeeVarResponse> executeSelectEmployeeVar(@RequestParam(value = "SearchID") Integer searchId, @RequestParam(value = "LiveListID") Integer liveListId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SelectEmployeeVar");
        Page<SelectEmployeeVarResponse> _result = queryService.executeSelectEmployeeVar(searchId, liveListId, pageable);
        LOGGER.debug("got the result for named query: SelectEmployeeVar, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SelectEmployeeVar")
    @RequestMapping(value = "/queries/SelectEmployeeVar/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSelectEmployeeVar(@RequestParam(value = "SearchID") Integer searchId, @RequestParam(value = "LiveListID") Integer liveListId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SelectEmployeeVar");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SelectEmployeeVar";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSelectEmployeeVar(searchId, liveListId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/EmployeeListOf_DeptId4", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<EmployeeListOfDeptId4Response> executeEmployeeListOf_DeptId4(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: EmployeeListOf_DeptId4");
        Page<EmployeeListOfDeptId4Response> _result = queryService.executeEmployeeListOf_DeptId4(pageable);
        LOGGER.debug("got the result for named query: EmployeeListOf_DeptId4, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query EmployeeListOf_DeptId4")
    @RequestMapping(value = "/queries/EmployeeListOf_DeptId4/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportEmployeeListOf_DeptId4(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: EmployeeListOf_DeptId4");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "EmployeeListOf_DeptId4";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportEmployeeListOf_DeptId4( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/NoOfDepartment", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<NoOfDepartmentResponse> executeNoOfDepartment(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: NoOfDepartment");
        Page<NoOfDepartmentResponse> _result = queryService.executeNoOfDepartment(pageable);
        LOGGER.debug("got the result for named query: NoOfDepartment, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query NoOfDepartment")
    @RequestMapping(value = "/queries/NoOfDepartment/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportNoOfDepartment(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: NoOfDepartment");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "NoOfDepartment";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportNoOfDepartment( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/TotalBudget", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<TotalBudgetResponse> executeTotalBudget(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: TotalBudget");
        Page<TotalBudgetResponse> _result = queryService.executeTotalBudget(pageable);
        LOGGER.debug("got the result for named query: TotalBudget, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query TotalBudget")
    @RequestMapping(value = "/queries/TotalBudget/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportTotalBudget(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: TotalBudget");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "TotalBudget";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportTotalBudget( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/EmployeeListOf_DeptId5", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<EmployeeListOfDeptId5Response> executeEmployeeListOf_DeptId5(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: EmployeeListOf_DeptId5");
        Page<EmployeeListOfDeptId5Response> _result = queryService.executeEmployeeListOf_DeptId5(pageable);
        LOGGER.debug("got the result for named query: EmployeeListOf_DeptId5, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query EmployeeListOf_DeptId5")
    @RequestMapping(value = "/queries/EmployeeListOf_DeptId5/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportEmployeeListOf_DeptId5(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: EmployeeListOf_DeptId5");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "EmployeeListOf_DeptId5";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportEmployeeListOf_DeptId5( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}